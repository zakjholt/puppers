{"version":3,"sources":["state.js","client.js","main.js"],"names":["State","constructor","client","onStateChange","_state","breedOptions","selectedBreedValue","currentPhoto","undefined","previousPhotos","breedsModalOpen","generateNextState","bind","onBreedSelect","onNewPicButtonClick","getNewPhotoData","toggleBreedsModal","onBreedOptionImgClick","onPreviousPhotoClick","newState","nextState","event","breedName","target","value","newPhotoData","breedImageUrl","url","getRandomBreedImageUrl","alt","newPreviousPhotos","stopPropagation","src","e","photoUrl","photoObj","find","po","nextPreviousPhotos","DogCeoClient","_baseUrl","_get","getBreedOptions","fetch","breedResponse","breedData","json","Object","keys","message","map","n","label","response","data","elementsMap","breedSelectContainer","document","querySelector","photoContainer","previousPhotosContainer","newPhotoButton","breedsModal","breedsModalButton","breedsModalOverlay","breedsModalGrid","addInitialListeners","addEventListener","state","removeAllChildNodes","parent","firstChild","removeChild","syncUi","length","select","createElement","forEach","bo","option","textContent","selected","appendChild","Promise","all","breedOptionItem","breedOptionImg","breedUrl","onclick","breedOptionLabel","classList","add","t","img","p","remove","initApp","window","onload"],"mappings":"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","file":"main.717c5a41.js","sourceRoot":"../src","sourcesContent":["// Holds the app state\n// Flow should be,\n// 1) Change state, generating new state\n// 2) Call onStateChange with the new state\nexport class State {\n  constructor({ client, onStateChange = () => {} }) {\n    this.client = client;\n    this.onStateChange = onStateChange;\n    this._state = {\n      breedOptions: [],\n      selectedBreedValue: \"shiba\",\n      currentPhoto: undefined,\n      previousPhotos: [],\n      breedsModalOpen: false,\n    };\n\n    this.generateNextState = this.generateNextState.bind(this);\n    this.onBreedSelect = this.onBreedSelect.bind(this);\n    this.onNewPicButtonClick = this.onNewPicButtonClick.bind(this);\n    this.getNewPhotoData = this.getNewPhotoData.bind(this);\n    this.toggleBreedsModal = this.toggleBreedsModal.bind(this);\n    this.onBreedOptionImgClick = this.onBreedOptionImgClick.bind(this);\n    this.onPreviousPhotoClick = this.onPreviousPhotoClick.bind(this);\n  }\n\n  generateNextState(newState) {\n    const nextState = { ...this._state, ...newState };\n\n    this._state = nextState;\n    this.onStateChange(this._state);\n  }\n\n  async onBreedSelect(event) {\n    const breedName = event.target.value;\n\n    const newPhotoData = await this.getNewPhotoData(breedName);\n\n    const newState = {\n      selectedBreedValue: breedName,\n      ...newPhotoData,\n    };\n\n    this.generateNextState(newState);\n  }\n\n  async onNewPicButtonClick() {\n    const newPhotoData = await this.getNewPhotoData();\n    this.generateNextState(newPhotoData);\n  }\n\n  async getNewPhotoData(breedName = this._state.selectedBreedValue) {\n    const breedImageUrl = await this.client.getRandomBreedImageUrl(breedName);\n\n    const photoObj = {\n      url: breedImageUrl,\n      alt: breedName,\n    };\n\n    const newState = {\n      currentPhoto: photoObj,\n    };\n\n    if (this._state.currentPhoto) {\n      const newPreviousPhotos = [\n        this._state.currentPhoto,\n        ...this._state.previousPhotos,\n      ];\n\n      newState.previousPhotos = newPreviousPhotos;\n    }\n\n    return newState;\n  }\n\n  toggleBreedsModal() {\n    const { breedsModalOpen } = this._state;\n\n    this.generateNextState({ breedsModalOpen: !breedsModalOpen });\n  }\n\n  onBreedOptionImgClick(event) {\n    event.stopPropagation();\n\n    this.generateNextState({\n      breedsModalOpen: false,\n      currentPhoto: {\n        url: event.target.src,\n        alt: event.target.alt,\n      },\n      selectedBreedValue: event.target.value,\n    });\n  }\n\n  onPreviousPhotoClick(e) {\n    const photoUrl = e.target.src;\n    const photoObj = this._state.previousPhotos.find(\n      (po) => po.url === photoUrl\n    );\n    const nextPreviousPhotos = [\n      this._state.currentPhoto,\n      ...this._state.previousPhotos,\n    ];\n    this.generateNextState({\n      currentPhoto: photoObj,\n      previousPhotos: nextPreviousPhotos,\n    });\n  }\n}\n","// Api client\nexport class DogCeoClient {\n  constructor() {\n    this._baseUrl = \"https://dog.ceo/api\";\n    this._get = this._get.bind(this);\n    this.getBreedOptions = this.getBreedOptions.bind(this);\n    this.getRandomBreedImageUrl = this.getRandomBreedImageUrl.bind(this);\n  }\n\n  _get(url) {\n    return fetch(`${this._baseUrl}${url}`);\n  }\n\n  async getBreedOptions() {\n    const breedResponse = await this._get(\"/breeds/list/all\");\n    const breedData = await breedResponse.json();\n    return Object.keys(breedData.message).map((n) => ({ label: n, value: n }));\n  }\n\n  async getRandomBreedImageUrl(breedName) {\n    const response = await this._get(`/breed/${breedName}/images/random`);\n    const data = await response.json();\n\n    return data.message;\n  }\n}\n","import \"./main.css\";\nimport { State } from \"./state\";\nimport { DogCeoClient } from \"./client\";\n\n// Maps keynames to dom selector\nconst elementsMap = {\n  breedSelectContainer: document.querySelector(\".breed_select_container\"),\n  photoContainer: document.querySelector(\".photo_container\"),\n  previousPhotosContainer: document.querySelector(\".previous_photos_container\"),\n  newPhotoButton: document.querySelector(\".new_photo_button\"),\n  breedsModal: document.querySelector(\".breeds_modal\"),\n  breedsModalButton: document.querySelector(\".breeds_modal_button\"),\n  breedsModalOverlay: document.querySelector(\".breeds_modal__overlay\"),\n  breedsModalGrid: document.querySelector(\".breeds_modal__grid\"),\n};\n\nconst addInitialListeners = () => {\n  elementsMap.newPhotoButton.addEventListener(\n    \"click\",\n    state.onNewPicButtonClick\n  );\n  elementsMap.breedsModalOverlay.addEventListener(\n    \"click\",\n    state.toggleBreedsModal\n  );\n  elementsMap.breedsModalButton.addEventListener(\n    \"click\",\n    state.toggleBreedsModal\n  );\n};\n\n// Useful for safely removing nodes inside of a parent. Also cleans up event listeners\nfunction removeAllChildNodes(parent) {\n  while (parent.firstChild) {\n    parent.removeChild(parent.firstChild);\n  }\n}\n\nconst syncUi = async (nextState) => {\n  const {\n    breedOptions,\n    selectedBreedValue,\n    currentPhoto,\n    previousPhotos,\n    breedsModalOpen,\n  } = nextState;\n\n  if (breedOptions.length) {\n    removeAllChildNodes(elementsMap.breedSelectContainer);\n    // put breed select with options inside container\n    const select = document.createElement(\"select\");\n    breedOptions.forEach((bo) => {\n      // add an option to the select\n      const option = document.createElement(\"option\");\n      option.textContent = bo.label;\n      option.value = bo.value;\n      option.selected = bo.value === selectedBreedValue;\n\n      select.appendChild(option);\n    });\n    elementsMap.breedSelectContainer.appendChild(select);\n    select.addEventListener(\"change\", state.onBreedSelect);\n\n    // Also populate the breed greed\n    // I'm aware that we're looping through breedOptions twice in here,\n    // but I don't want the select to be blocked while we fetch urls for the breeds\n    removeAllChildNodes(elementsMap.breedsModalGrid);\n    const breedImgTiles = await Promise.all(\n      breedOptions.map(async (bo) => {\n        const breedOptionItem = document.createElement(\"div\");\n        const breedOptionImg = document.createElement(\"img\");\n        const breedUrl = await client.getRandomBreedImageUrl(bo.value);\n        breedOptionImg.alt = bo.value;\n        breedOptionImg.src = breedUrl;\n        breedOptionImg.value = bo.value;\n        breedOptionImg.onclick = state.onBreedOptionImgClick;\n        breedOptionItem.appendChild(breedOptionImg);\n\n        const breedOptionLabel = document.createElement(\"div\");\n        breedOptionLabel.classList.add(\"label\");\n        breedOptionLabel.textContent = bo.value;\n        breedOptionItem.appendChild(breedOptionLabel);\n\n        return breedOptionItem;\n      })\n    );\n\n    breedImgTiles.forEach((t) => elementsMap.breedsModalGrid.appendChild(t));\n  }\n\n  if (currentPhoto) {\n    // put photo inside container\n    removeAllChildNodes(elementsMap.photoContainer);\n    const img = document.createElement(\"img\");\n    img.alt = currentPhoto.alt;\n    img.src = currentPhoto.url;\n    elementsMap.photoContainer.appendChild(img);\n  }\n\n  if (previousPhotos.length) {\n    // put previous photos in here\n    removeAllChildNodes(elementsMap.previousPhotosContainer);\n    previousPhotos.forEach((p) => {\n      const img = document.createElement(\"img\");\n      img.alt = p.alt;\n      img.src = p.url;\n      elementsMap.previousPhotosContainer.appendChild(img);\n      img.onclick = state.onPreviousPhotoClick;\n    });\n  }\n\n  if (breedsModalOpen) {\n    elementsMap.breedsModal.classList.remove(\"hidden\");\n  } else {\n    elementsMap.breedsModal.classList.add(\"hidden\");\n  }\n};\n\nconst client = new DogCeoClient();\nconst state = new State({ client, onStateChange: syncUi });\n\nconst initApp = async () => {\n  const breedOptions = await client.getBreedOptions();\n  const newPhotoData = await state.getNewPhotoData();\n  state.generateNextState({ breedOptions, ...newPhotoData });\n  addInitialListeners();\n};\n\nwindow.onload = initApp;\n"]}